<!DOCTYPE html>
<html>
<head>
  <title>Basic Snake HTML Game</title>
  <meta charset="UTF-8">
  <style>
    html, body {
      height: 100%;
      margin: 0;
    }

    body {
      background-image: url('https://cdn.tutsplus.com/mobile/uploads/legacy/Corona-SDK_Build-A-Snake-Game/1/6.png');
      background-size: cover;
      background-position: center;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-direction: column;
    }
    canvas {
      border: 1px solid white;
    }
    #coins {
      color: white;
      font-size: 24px;
      position: absolute;
      top: 10px;
      left: 10px;
    }
    #timer {
      color: white;
      font-size: 24px;
      position: absolute;
      top: 10px;
      right: 10px;
    }

    #homepage-btn {
      margin-top: 20px;
      padding: 10px 20px;
      font-size: 16px;
      cursor: pointer;
    }

    #mute-btn {
      position: absolute;
      bottom: 20px;
      left: 20px;
      padding: 10px 20px;
      font-size: 16px;
      cursor: pointer;
    }

    #volume-control {
      position: absolute;
      bottom: 20px;
      right: 20px;
    }
    #volume-control label {
      color: white;
    }

    /* Modal styles */
    .modal {
      display: none; /* Hidden by default */
      position: fixed; /* Stay in place */
      z-index: 1; /* Sit on top */
      left: 0;
      top: 0;
      width: 100%; /* Full width */
      height: 100%; /* Full height */
      overflow: auto; /* Enable scroll if needed */
      background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
    }

    .modal-content {
      background-color: #fefefe;
      margin: 15% auto; /* 15% from the top and centered */
      padding: 20px;
      border: 1px solid #888;
      width: 80%; /* Could be more or less, depending on screen size */
      text-align: center; /* Center the text */
    }

    /* Center buttons */
    .modal-content button {
      display: block;
      margin: 10px auto;
    }

    /* Close button */
    .close {
      color: #aaa;
      float: right;
      font-size: 28px;
      font-weight: bold;
    }

    .close:hover,
    .close:focus {
      color: black;
      text-decoration: none;
      cursor: pointer;
    }
  </style>
</head>
<body>
<audio id="bg-music" autoplay loop> <source src="https://www.myinstants.com/media/sounds/doors-elevator-music.mp3"> Your browser does not support the audio element. </audio>
<audio id="eat-sound">
  <source src="https://commondatastorage.googleapis.com/codeskulptor-assets/jump.ogg" type="audio/mpeg">
  Your browser does not support the audio element.
</audio>
<canvas width="500" height="500" id="game"></canvas>
<div id="coins">Coins: 0</div>
<div id="timer">Time: 30</div>
<button id="homepage-btn">Return to Homepage</button> <!-- Added button -->
<button id="mute-btn">Mute</button> <!-- Mute button -->
<div id="volume-control">
  <label for="volume-slider">Volume:</label>
  <input type="range" id="volume-slider" min="0" max="1" step="0.01" value="1">
</div>

<!-- Modal -->
<div id="myModal" class="modal">
  <!-- Modal content -->
  <div class="modal-content">
    <span class="close">&times;</span>
    <p id="modal-text"></p>
    <button id="reset-btn">Play Again</button>
    <button id="modal-homepage-btn">Return to Homepage</button> <!-- Added button -->
  </div>
</div>

<script>
var canvas = document.getElementById('game');
var context = canvas.getContext('2d');
var coinsDisplay = document.getElementById('coins');
var timerDisplay = document.getElementById('timer');
var modal = document.getElementById('myModal');
var modalText = document.getElementById('modal-text');
var resetBtn = document.getElementById('reset-btn');
var homepageBtn = document.getElementById('homepage-btn');
var modalHomepageBtn = document.getElementById('modal-homepage-btn'); // Added variable
var muteBtn = document.getElementById('mute-btn'); // Mute button
var volumeSlider = document.getElementById('volume-slider'); // Volume slider

var bgMusic = document.getElementById('bg-music');
var eatSound = document.getElementById('eat-sound');

var isMuted = false; // Track mute state

// Load snake head, body and apple images
var snakeHeadImg = new Image();
snakeHeadImg.src = 'https://www.simplilearn.com/ice9/free_resources_article_thumb/Shyamli/Dogecoin.png';
var snakeBodyImg = new Image();
snakeBodyImg.src = 'https://www.simplilearn.com/ice9/free_resources_article_thumb/Shyamli/Dogecoin.png';
var appleImg = new Image();
appleImg.src = 'https://cdn-icons-png.flaticon.com/512/415/415733.png';

var grid = 20;
var coins = 0;
var time = 30;
var gameInterval;
var timerInterval;
var snake;
var apple;

function startGame() {
  snake = {
    x: 160,
    y: 160,
    dx: grid,
    dy: 0,
    cells: [],
    maxCells: 1
  };
  apple = {
    x: 320,
    y: 320
  };

  gameInterval = setInterval(loop, 100);
  timerInterval = setInterval(updateTimer, 1000);
}

function updateTimer() {
  time--;
  timerDisplay.textContent = 'Time: ' + time;
  if (time <= 0) {
    endGame();
  }
}

function getRandomInt(min, max) {
  return Math.floor(Math.random() * (max - min)) + min;
}

function loop() {
  context.clearRect(0, 0, canvas.width, canvas.height);

  snake.x += snake.dx;
  snake.y += snake.dy;

  if (snake.x < 0) {
    snake.x = canvas.width - grid;
  } else if (snake.x >= canvas.width) {
    snake.x = 0;
  }

  if (snake.y < 0) {
    snake.y = canvas.height - grid;
  } else if (snake.y >= canvas.height) {
    snake.y = 0;
  }

  snake.cells.unshift({ x: snake.x, y: snake.y });

  if (snake.cells.length > snake.maxCells) {
    snake.cells.pop();
  }

  // Draw the apple image
  context.drawImage(appleImg, apple.x, apple.y, grid - 1, grid - 1);

  snake.cells.forEach(function (cell, index) {
    if (index === 0) {
      context.drawImage(snakeHeadImg, cell.x, cell.y, grid - 1, grid - 1);
    } else {
      context.drawImage(snakeBodyImg, cell.x, cell.y, grid - 1, grid - 1);
    }

    if (cell.x === apple.x && cell.y === apple.y) {
      snake.maxCells++;
      coins += 1;
      coinsDisplay.textContent = 'Coins: ' + coins;
      apple.x = getRandomInt(0, 25) * grid;
      apple.y = getRandomInt(0, 25) * grid;

      if (!isMuted) {
        eatSound.play();
      }
    }

    for (var i = index + 1; i < snake.cells.length; i++) {
      if (cell.x === snake.cells[i].x && cell.y === snake.cells[i].y) {
        endGame();
      }
    }
  });
}

function endGame() {
  clearInterval(gameInterval);
  clearInterval(timerInterval);
  modalText.textContent = 'Game Over!\nTotal Coins Collected: ' + coins;
  modal.style.display = 'block';
  bgMusic.pause();
}

function resetGame() {
  modal.style.display = 'none';
  time = 30;
  coins = 0;
  coinsDisplay.textContent = 'Coins: ' + coins;
  timerDisplay.textContent = 'Time: ' + time;
  startGame();
  if (!isMuted) {
    bgMusic.play();
  }
}

function returnToHomepage() {
  window.location.href = ''; // Replace with your homepage URL
}

function toggleMute() {
  isMuted = !isMuted;
  if (isMuted) {
    bgMusic.pause();
    muteBtn.textContent = 'Unmute';
  } else {
    bgMusic.play();
    muteBtn.textContent = 'Mute';
  }
}

function adjustVolume() {
  var volume = volumeSlider.value;
  bgMusic.volume = volume;
  eatSound.volume = volume;
}

document.addEventListener('keydown', function (e) {
  if (e.which === 37 && snake.dx === 0) {
    snake.dx = -grid;
    snake.dy = 0;
  } else if (e.which === 38 && snake.dy === 0) {
    snake.dy = -grid;
    snake.dx = 0;
  } else if (e.which === 39 && snake.dx === 0) {
    snake.dx = grid;
    snake.dy = 0;
  } else if (e.which === 40 && snake.dy === 0) {
    snake.dy = grid;
    snake.dx = 0;
  }
});

resetBtn.addEventListener('click', resetGame);
homepageBtn.addEventListener('click', returnToHomepage);
modalHomepageBtn.addEventListener('click', returnToHomepage); // Added event listener
muteBtn.addEventListener('click', toggleMute); // Mute button event listener
volumeSlider.addEventListener('input', adjustVolume); // Volume slider event listener

var closeBtn = document.getElementsByClassName('close')[0];
closeBtn.addEventListener('click', function() {
  modal.style.display = 'none';
});

startGame();
</script>
</body>
</html>
